pipeline {
  agent none

  environment {
    docker_label="python:3-alpine"
    nlw_host="dockerps3.apps.neotys.com"
    api_url="https://${env.nlw_host}:8080"
    zone_id="defaultzone"
    cli_version="1.3.9"
  }

  stages {
    stage ('Prep workspace') {
      agent any
      steps {
        cleanWs()
        script {
          sh "uname -a"
          env.host_ip = sh(script: "getent hosts ${env.nlw_host} | head -n1 | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])'", returnStdout: true).trim()
          echo env.host_ip
        }
      }
    }
    stage('Attach Worker') {
      agent {
        docker {
          image "${env.docker_label}"
          args "--add-host ${env.nlw_host}:${env.host_ip} -e HOME=${env.WORKSPACE} -e PYTHONUNBUFFERED=1"
        }
      }
      stages {
        stage('Prepare agent') {
          steps {
            withEnv(["HOME=${env.WORKSPACE}"]) {
              sh """python --version
                    pip3 --version
                    pip3 install neoload==${env.cli_version}
                    export PATH=$PATH:.local/bin
                    neoload --version"""
            }
            withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
              sh "neoload login --url ${env.api_url} $NLW_TOKEN"
            }
          }
        }
        stage('Prepare Neoload test') {
          steps {
            sh "neoload test-settings --zone ${env.zone_id} --lgs 1 --scenario sanityScenario createorpatch 'example-Jenkins-module1-${env.agent_name}'"
            sh "neoload status"
            sh "neoload project --path tests/neoload_projects/example_1/ upload"
          }
        }
        stage('Run Test') {
          steps {
            sh "neoload run --name \"${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\""
          }
          post {
            always {
              sh "neoload test-results junitsla"
              sh "sed -i 's/\\<br\\/\\>/\\n/g' junit-sla.xml"
              junit 'junit-sla.xml'
            }
          }
        }
      }
    }
  }
}

properties([parameters([string(defaultValue: "1.3.9", description: 'CLI Version', name: 'cli_version'), choice(name: 'zone_id', choices: ['defaultzone', 'rroum'], description: 'Zone Identifier (1. Static or 2. Dynamic)'), string(defaultValue: "https://dockerps3.apps.neotys.com:8080", description: 'NeoLoad Web Api Url', name: 'api_url'), string(defaultValue: "nwilliams_TC", description: 'Unique Test Case Name', name: 'test_name')])])

node('dockerps3_host') {
  stage('Install the NLWeb CLI') {
    sh """python3 --version
          pip3 --version
          sudo pip3 install neoload==${cli_version}
          neoload --version"""
  }
  stage('Login to the NLWeb CLI') {
    withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
      sh "neoload login --url ${api_url} --ssl-cert False $NLW_TOKEN"
    }
  }
  stage('Checkout the NL project') {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'neoload-project-${BUILD_NUMBER}']], userRemoteConfigs: [[credentialsId: 'theqmguy', url: 'https://github.com/theqmguy/neoload-ci-training.git']]])
  }
  stage('Create the NLWeb Test') {
    sh """neoload workspaces use 'Default Workspace' \
          test-settings --zone ${zone_id} --lgs 1 --scenario 'api' --description 'Do NOT Delete (Build ${BUILD_NUMBER})' createorpatch ${test_name} \
          project --path "$WORKSPACE/neoload-project-${BUILD_NUMBER}/tests/neoload_projects/example_1/" upload ${test_name}"""
  }
  stage('Uninstall the NLWeb CLI') {
    sh """sudo pip3 uninstall --yes neoload==1.3.9"""  
  }
}
/*
node('dockerps3_host') {
    stage('Checkout/Clone GIT NL project') {
        // Get NL project
        git branch: 'master', credentialsId: 'ee932196-cedc-4ba1-a204-5d8a705c74ac', url: 'https://bitbucket.org/neils-bit/GitDemo_v680'
    }
    stage('Generate YAML') {
        // some block
        writeFile file: 'generated_scen.yaml', text: 
        '''scenarios:
        - name: ''' +"${Scenario}"+'''
          populations:
          - name: Jenkins Population
            constant_load:
              users: ''' +"${Users}"+'''
              duration: ''' +"${Duration}"
    }
    stage('Remove Log Files') {
        // remove the log files
        //sh 'rm /root/.neotys/neoload/v7.7/logs/*.*'
     }
    stage('Run NL Demo Test') {
        neoloadRun executable: '/opt/Neoload7.7/bin/NeoLoadCmd', project: "${WORKSPACE}/GitDemo_v680.nlp", testName: 'Result of Jenkins (v7.7) Pipeline Scenario - $Date{hh:mm - dd MMM yyyy} (build ${BUILD_NUMBER})', testDescription: 'My jenkins pipeline run...on v7.7', commandLineOption: "-project '${WORKSPACE}/generated_scen.yaml' -nlweb -nlwebAPIURL https://dockerps3.apps.neotys.com:8080 -nlwebToken AR9bpYYCIUsJIFOo0ed7Ksxi -variables sla_failure=${SLA} -exitCodeFailIgnore", scenario: "${Scenario}", sharedLicense: [server: 'My Neoload Web', duration: 2, vuCount: "${Users}"], trendGraphs: [[name: 'Average Duration Across Builds', curve: ['Jenkins Demo>Actions>some_transaction_filler'], statistic: 'average'], 'AvgResponseTime', 'ErrorRate'], autoArchive: 'false'
        neoloadRefreshTrends(trendGraphs: [[name: 'Average Duration Across Builds', curve: ['Jenkins Demo>Actions>transaction_filler'], statistic: 'average'], 'AvgResponseTime', 'ErrorRate'])
    }
    stage('Backup Log Files') {
        // backup log files from run
        sh 'cp -R /root/.neotys/neoload/v7.7/logs "${WORKSPACE}/neoload-report/logs"'
    }
    stage('Archive and JUnit') {
        archiveArtifacts "neoload-report/**"
        junit "neoload-report/junit*.xml"
    }
}

pipeline {
  agent none

  environment {
    docker_label="python:3-alpine"
    nlw_host="dockerps3.apps.neotys.com"
    api_url="https://${env.nlw_host}:8080"
    zone_id="defaultzone"
  }

  stages {
    stage ('Prep workspace') {
      agent any
      steps {
        cleanWs()
        script {
          sh "uname -a"
          env.host_ip = sh(script: "getent hosts ${env.nlw_host} | head -n1 | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])'", returnStdout: true).trim()
          env.agent_name = "${env.VM_HOST_EXT_IP}" // sh(script: "uname -a | tr -s ' ' | cut -d ' ' -f2", returnStdout: true)
        }
      }
    }
    stage('Attach Worker') {
      agent {
        docker {
          image "${env.docker_label}"
          args "--add-host ${env.nlw_host}:${env.host_ip} -e HOME=${env.WORKSPACE} -e PYTHONUNBUFFERED=1"
        }
      }
      stages {
        stage('Prepare agent') {
          steps {
            sh 'neoload --version'
            withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
              sh "neoload login --url ${env.api_url} $NLW_TOKEN"
            }
          }
        }
        stage('Prepare Neoload test') {
          steps {
            sh "neoload test-settings --zone ${env.zone_id} --lgs 1 --scenario sanityScenario createorpatch 'example-Jenkins-module1-${env.agent_name}'"
            sh "neoload status"
            sh "neoload project --path tests/neoload_projects/example_1/ upload"
          }
        }
        stage('Run Test') {
          steps {
            sh "neoload run --name \"${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\""
          }
          post {
            always {
              sh "neoload test-results junitsla"
              sh "sed -i 's/\\<br\\/\\>/\\n/g' junit-sla.xml"
              junit 'junit-sla.xml'
            }
          }
        }
      }
    }
  }
}
*/
